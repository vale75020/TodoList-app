{"version":3,"sources":["Todos.js","AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","className","key","id","onClick","content","AddForm","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","console","log","props","addTodo","onSubmit","this","type","onChange","Component","App","updateTodos","filter","Math","random","newTodosArray","concat","Object","toConsumableArray","src_Todos","AddForm_AddForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAwBeA,EAtBD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WACbC,EAAWF,EAAMG,OACpBH,EAAMI,IAAI,SAAAC,GACT,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAKM,IACvCL,EAAAC,EAAAC,cAAA,QAAMI,QAAS,kBAAMX,EAAWI,EAAKM,MAAMN,EAAKQ,YAKxDP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,2BAGJ,OAEQH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVP,IChBIY,6MACjBC,MAAQ,CACJF,QAAQ,MAGZG,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVN,QAASI,EAAEG,OAAOC,WAI1BC,aAAe,SAACL,GACZA,EAAEM,iBACFC,QAAQC,IAAIP,EAAKH,OACjBG,EAAKQ,MAAMC,QAAQT,EAAKH,OACxBG,EAAKC,SAAS,CACVN,QAAQ,8EAKZ,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMoB,SAAUC,KAAKP,cACjBhB,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOC,SAAUF,KAAKb,aAAcK,MAAOQ,KAAKd,MAAMF,mBAzBjDmB,aCoCtBC,6MAjCblB,MAAQ,CACNf,MAAO,CAAC,CAAEW,GAAI,EAAGE,QAAS,YAAc,CAAEF,GAAI,EAAGE,QAAS,iBAG5DZ,WAAa,SAAAU,GACXa,QAAQC,IAAId,GACZ,IAAMuB,EAAchB,EAAKH,MAAMf,MAAMmC,OAAO,SAAA9B,GAC1C,OAAOA,EAAKM,KAAOA,IAErBO,EAAKC,SAAS,CACZnB,MAAOkC,OAIXP,QAAU,SAACtB,GACTA,EAAKM,GAAKyB,KAAKC,SACf,IAAIC,EAAa,GAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAOtB,EAAKH,MAAMf,OAAlB,CAAyBK,IAC1Ca,EAAKC,SAAS,CACZnB,MAAOsC,6EAKT,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,UACAH,EAAAC,EAAAC,cAACkC,EAAD,CAAO1C,MAAO6B,KAAKd,MAAMf,MAAOC,WAAY4B,KAAK5B,aACjDK,EAAAC,EAAAC,cAACmC,EAAD,CAAShB,QAASE,KAAKF,kBA5BbK,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.624bbada.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todos = ({todos, deleteTodo}) => {\n    const todoList = todos.length \n    ? (todos.map(todo => {\n        return (\n            <div className=\"collection-item\" key={todo.id}>\n                <span onClick={() => deleteTodo(todo.id)}>{todo.content}</span>\n            </div>\n        )\n    })) \n    : (\n        <p className=\"center\">You have no todo's left</p>\n    )\n\n    return (\n        \n            <div className=\"todos collection\">\n                {todoList}\n            </div>    \n    \n    );\n};\n\nexport default Todos;\n","import React, { Component } from 'react'\n\nexport default class AddForm extends Component {\n    state = {\n        content:\"\"\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state);\n        this.props.addTodo(this.state)\n        this.setState({\n            content:\"\"\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>Add New Todo: </label>\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content} />\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport Todos from \"./Todos\";\nimport AddForm from \"./AddForm\";\n\nclass App extends Component {\n  state = {\n    todos: [{ id: 1, content: \"buy milk\" }, { id: 2, content: \"buy bread\" }]\n  };\n\n  deleteTodo = id => {\n    console.log(id);\n    const updateTodos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n    this.setState({\n      todos: updateTodos\n    });\n  };\n\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    let newTodosArray = [...this.state.todos, todo];\n    this.setState({\n      todos: newTodosArray\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"todos-app container\">\n        <h1 className=\"center blue-text\">Todo's</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddForm addTodo={this.addTodo}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}